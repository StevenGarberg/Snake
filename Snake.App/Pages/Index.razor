@page "/"

<h1>Snake</h1>

<div @ref="gameContainer" tabindex="0" @onkeydown="KeyboardEventHandler">
    @if (_gameOver == false)
    {
        <div class="game-board">
            @for (var i = 0; i < 40; i++)
            {
                <div class="game-board-row">
                    @for (var j = 0; j < 40; j++)
                    {
                        var boardState = _board[i][j];
                        if (boardState == null)
                        {
                            <span class="game-board-cell">&nbsp;</span>
                        }
                        else if (boardState == BoardState.Snake)
                        {
                            <span class="game-board-cell snake">&nbsp;</span>
                        }
                        else if (boardState == BoardState.Food)
                        {
                            <span class="game-board-cell food">&nbsp;</span>
                        }
                    }
                </div>
            }
        </div>
    
        <button class="btn btn-primary" @onclick="() => { ChangeDirection(Direction.Right); }">Go Right</button>
        <button class="btn btn-primary" @onclick="() => { ChangeDirection(Direction.Left); }">Go Left</button>
        <button class="btn btn-primary" @onclick="() => { ChangeDirection(Direction.Up); }">Go Up</button>
        <button class="btn btn-primary" @onclick="() => { ChangeDirection(Direction.Down); }">Go Down</button>
    }
    else
    {
        if (_gameOver == true)
        {
            <p>Game over!</p>
        }
        <button class="btn btn-success" @onclick="async () => { await Start(); } ">Start Game</button>
    }
</div>

@code {
    private enum BoardState { Snake, Food }
    private enum Direction { Right, Left, Up, Down }

    private ElementReference gameBoardElement, gameContainer;
    private BoardState?[][] _board;
    private List<(int i, int j)> _snake;
    private Direction _currentDirection;
    private bool? _gameOver;
    
    private async Task Start()
    {
        _board = new BoardState?[40][];
        _snake = new List<(int i, int j)> { new(20, 20) };
        _currentDirection = Direction.Right;
        _gameOver = false;

        for (var i = 0; i < 40; i++)
        {
            _board[i] = new BoardState?[40];
        }

        _board[20][20] = BoardState.Snake;
        PlaceFood();
        await gameContainer.FocusAsync();
        GameLoop();
    }

    private async Task GameLoop()
    {
        while (_gameOver == false)
        {
            await Task.Delay(250);
            try
            {
                MoveSnake();
            }
            catch(Exception e)
            {
                _gameOver = true;
                Console.WriteLine("Game over!");
            }
            StateHasChanged();
        }
    }
    
    private void PlaceFood()
    {
        var potentialSpots = new List<(int x, int y)>();
        for (var i = 0; i < 40; i++)
        {
            for (var j = 0; j < 40; j++)
            {
                if (_board[i][j] == null)
                    potentialSpots.Add((i, j));
            }
        }
        var randomIndex = new Random().Next(0, potentialSpots.Count);
        var randomSpot = potentialSpots[randomIndex];
        
        _board[randomSpot.x][randomSpot.y] = BoardState.Food;
    }

    private void ChangeDirection(Direction direction)
    {
        _currentDirection = direction;
    }

    private void KeyboardEventHandler(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            default:
                return;
            case "a":
            case "ArrowLeft":
                _currentDirection = Direction.Left;
                break;
            case "d":
            case "ArrowRight":
                _currentDirection = Direction.Right;
                break;
            case "w":
            case "ArrowUp":
                _currentDirection = Direction.Up;
                break;
            case "s":
            case "ArrowDown":
                _currentDirection = Direction.Down;
                break;
        }
    }
    
    private void MoveSnake()
    {
        (int i, int j) movement = _currentDirection switch
        {
            Direction.Down => (1, 0),
            Direction.Up => (-1, 0),
            Direction.Right => (0, 1),
            Direction.Left => (0, -1),
            _ => (0, 0)
        };

        var playedHead = _snake[0];
        (int i, int j) newLocation = (playedHead.i + movement.i, playedHead.j + movement.j);
        
        var currentItem = _board[newLocation.i][newLocation.j];
        if (currentItem == BoardState.Food)
        {
            _board[newLocation.i][newLocation.j] = BoardState.Snake;
            _snake.Insert(0, (newLocation.i, newLocation.j));
            PlaceFood();
        }
        else if (currentItem == BoardState.Snake)
        {
            _gameOver = true;
            Console.WriteLine("Game over!");
        }
        else
        {
            var lastPosition = _snake[0];
            _board[_snake[0].i][_snake[0].j] = null;
            _snake[0] = (newLocation.i, newLocation.j);
            _board[newLocation.i][newLocation.j] = BoardState.Snake;
            
            for (var i = 1; i < _snake.Count; i++)
            {
                _board[_snake[i].i][_snake[i].j] = null;
                (_snake[i], lastPosition) = (lastPosition, _snake[i]);
                _board[_snake[i].i][_snake[i].j] = BoardState.Snake;
            }
        }
    }
}